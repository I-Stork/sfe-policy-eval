#!/usr/bin/env python3

import argparse
from random import choice

DEBUG = False

attributes = range(1, 11)
values = [range((x - 1) * 10 + 1, x * 10 + 1) for x in attributes]
conditions = range(1, 5)
decisions = range(0, 2)

targets 

def generate_leaf():
	value = choice(decisions)
	return "([%d])" % value 

def generate_policy():
	if targets > 2:

	elif target == 1:
		
	else:
		return generate_leaf()

def generate_target():
    attr = choice(attributes)
    val = choice(values[attr - 1])
    cond = choice(conditions)
    leaf = choice(decisions)
	leaf = generate_leaf()

    return "T(%d, %d, %d, %s)" % (attr, val, cond, leaf)

def generate_query(query_length):
    query = ""
    for x in range(0, query_length):
        attr = choice(attributes)
        val = choice(values[attr - 1])
        query += "{%s, %s}, " % (attr, val)

    return query[:-2]

def generate_dummy_target(decision):
	return 'D(%d, %d, %d)' % (decision[0], decision[1], decision[2])

def generate_experiment1(targets, operations, repetitions, query_length):
    for t in targets:
        for q in query_length:
            for x in range(1, repetitions + 1):
                query = generate_query(q)
                policy = generate_target()

                print("[%d, %d, %d, %d]===[%s]===[%s]" % (t, operations, q, x, query, policy))

def generate_experiment2(targets, operations, repetitions, query_length):
	decisions = [(1, 0, 0), (0, 1, 0), (0, 0, 1)]
	ops = ['smax', 'smin', 'wmax', 'wmin', 'po', 'do', 'fa']
	for k in range(1, repetitions+1):	
		for x in decisions:
				print("[0, 1, 1, %d]===[{1, 1}]===[wea((%s))]" % (k, generate_dummy_target(x)))
				print("[0, 1, 1, %d]===[{1, 1}]===[not((%s))]" % (k, generate_dummy_target(x)))
				for y in decisions:
					for o in ops:
						print("[0, 1, 1, %d]===[{1, 1}]===[%s((%s), (%s))]" % (k, o, generate_dummy_target(x), generate_dummy_target(y)))
def main():
    targets = [1]
    operations = 0
    repetitions = 50
    query_length = range(1, 21)

    if DEBUG:
        print("Starting generator")
        print("Targets: %d \nOperations: %d \nRepetitions: %d \nQuery length: %d \n" % (len(targets), operations, repetitions, len(query_length)))

    generate_experiment2(targets, operations, repetitions, query_length)

if __name__ == "__main__":
    main()
